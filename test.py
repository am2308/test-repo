#!/usr/bin/env python3
"""
Converted from shell: test.sh
Generated by MCP Multi-Language to Python Converter
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from typing import Optional, List, Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

#!/usr/bin/env python3

import argparse
import logging
import subprocess
from typing import Optional

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

def create_s3_bucket(bucket_name: str, region: Optional[str] = "us-east-1") -> None:
    """
    Create an S3 bucket in the specified region.

    :param bucket_name: Name of the S3 bucket to create
    :param region: AWS region to create the bucket in. Default is 'us-east-1'.
    """
    # Create the S3 bucket
    try:
        subprocess.run(["aws", "s3api", "create-bucket",
                        "--bucket", bucket_name,
                        "--region", region,
                        "--create-bucket-configuration", f"LocationConstraint={region}"],
                       check=True)
    except subprocess.CalledProcessError:
        logger.error("Failed to create bucket.")
        return

    logger.info(f"Bucket '{bucket_name}' created successfully in region '{region}'.")

def main():
    # Set up argument parsing
    parser = argparse.ArgumentParser(description='Create an S3 bucket.')
    parser.add_argument('bucket_name', help='Name of the S3 bucket to create')
    args = parser.parse_args()

    # Create the S3 bucket
    create_s3_bucket(args.bucket_name)

if __name__ == "__main__":
    main()