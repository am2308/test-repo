#!/usr/bin/env python3
"""
Converted from typescript: test_type.ts
Generated by MCP Multi-Language to Python Converter
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from typing import Optional, List, Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# create_s3_bucket.py

import sys
import logging
import boto3
from botocore.exceptions import BotoCoreError, ClientError

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_s3_bucket(bucket_name: str, region: str = "us-east-1") -> None:
    """Create an S3 bucket in a specified region.

    If a bucket with the specified name already exists, the operation is
    idempotent and will not result in an error.

    Args:
        bucket_name (str): The name of the bucket to create.
        region (str, optional): The region in which to create the bucket. Defaults to "us-east-1".

    Raises:
        BotoCoreError: If there's an issue with the AWS SDK.
        ClientError: If there's an issue with the client request (e.g., invalid bucket name).
    """
    try:
        s3_client = boto3.client('s3', region_name=region)
        s3_client.create_bucket(
            Bucket=bucket_name,
            CreateBucketConfiguration={'LocationConstraint': region}
        )
        logger.info(f"Bucket '{bucket_name}' created successfully in region '{region}'.")
    except (BotoCoreError, ClientError) as error:
        logger.error(f"Failed to create bucket: {error}")
        raise

if __name__ == "__main__":
    if len(sys.argv) != 2:
        logger.error("Usage: python create_s3_bucket.py <bucket-name>")
        sys.exit(1)

    bucket_name = sys.argv[1]
    create_s3_bucket(bucket_name)