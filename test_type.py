#!/usr/bin/env python3
"""
Converted from typescript: test_type.ts
Generated by MCP Multi-Language to Python Converter
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from typing import Optional, List, Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# create_s3_bucket.py

import sys
import logging
import boto3
from botocore.exceptions import BotoCoreError, ClientError
from typing import Optional

def create_s3_bucket(bucket_name: str, region: str = "us-east-1") -> Optional[str]:
    """
    Create an S3 bucket in a specified region.

    :param bucket_name: Name of the bucket to create.
    :param region: Region to create the bucket in. Default is 'us-east-1'.
    :return: Bucket name if created successfully, None otherwise.
    """
    s3_client = boto3.client('s3', region_name=region)
    try:
        s3_client.create_bucket(
            Bucket=bucket_name,
            CreateBucketConfiguration={'LocationConstraint': region}
        )
        logging.info(f"Bucket '{bucket_name}' created successfully in region '{region}'.")
        return bucket_name
    except (BotoCoreError, ClientError) as error:
        logging.error(f"Failed to create bucket: {error}")
        return None

def main():
    if len(sys.argv) != 2:
        logging.error("Usage: python create_s3_bucket.py <bucket-name>")
        sys.exit(1)

    bucket_name = sys.argv[1]
    create_s3_bucket(bucket_name)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()