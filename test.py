#!/usr/bin/env python3
"""
Converted from shell: test.sh
Generated by MCP Multi-Language to Python Converter
"""

import os
import sys
import subprocess
import logging
from pathlib import Path
from typing import Optional, List, Dict, Any

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

import argparse
import logging
import subprocess
from typing import Optional

def create_s3_bucket(bucket_name: str, region: str = "us-east-1") -> Optional[str]:
    """
    Function to create an S3 bucket using AWS CLI.

    Args:
        bucket_name (str): Name of the S3 bucket to be created.
        region (str, optional): AWS region where the bucket will be created. Defaults to "us-east-1".

    Returns:
        Optional[str]: Success message if bucket is created, None otherwise.
    """
    try:
        # Create the S3 bucket
        subprocess.run(["aws", "s3api", "create-bucket", "--bucket", bucket_name, "--region", region, "--create-bucket-configuration", f"LocationConstraint={region}"], check=True)
        return f"Bucket '{bucket_name}' created successfully in region '{region}'."
    except subprocess.CalledProcessError:
        logging.error("Failed to create bucket.")
        return None

def main():
    # Set up argument parser
    parser = argparse.ArgumentParser(description="Create an S3 bucket.")
    parser.add_argument("bucket_name", help="Name of the S3 bucket to be created.")
    args = parser.parse_args()

    # Check if bucket name is provided
    if not args.bucket_name:
        parser.error("Usage: create_s3_bucket.py <bucket-name>")

    # Create the S3 bucket
    result = create_s3_bucket(args.bucket_name)
    if result:
        logging.info(result)

if __name__ == "__main__":
    main()